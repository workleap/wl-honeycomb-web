[[{"l":"Introduction","p":["Getting started","Custom traces"]}],[{"l":"Getting started","p":["To monitor application performance, Workleap has adopted Honeycomb, a tool that helps teams manage and analyze telemetry data from distributed systems. Built on OpenTelemetry, Honeycomb provides a robust API for tracking frontend telemetry.","Honeycomb's in-house HoneycombWebSDK includes great default instrumentation. This package provides a slightly altered default instrumentation which is adapted for Workleap's web application observability requirements."]},{"l":"Install the packages","p":["First, open a terminal at the root of the application and install the following packages:"]},{"l":"Register instrumentation","p":["Then, update the application bootstrapping code to register Honeycomb instrumentation using the registerHoneycombInstrumentation function:","Avoid using /.+/g, in production, as it could expose customer data to third parties. Instead, ensure you specify values that accurately matches your application's backend URLs.","We recommend using an OpenTelemetry collector with an authenticated proxy over an ingestion API key, as API keys can expose Workleap to potential attacks.","With instrumentation in place, a few traces are now available \uD83D\uDC47"]},{"l":"Fetch requests","p":["Individual fetch request performance can be monitored from end to end:","Fetch instrumentation"]},{"l":"Document load","p":["The loading performance of the DOM can be monitored:","Document load instrumentation"]},{"l":"Unmanaged error","p":["When an unmanaged error occurs, it's automatically recorded:","Recorded error"]},{"l":"Real User Monitoring (RUM)","p":["The default instrumentation will automatically track the appropriate metrics to display RUM information:","Largest Contentful Paint","Cumulative Layout Shift","Interaction to Next Paint"]},{"l":"Set custom user attributes","p":["Most application needs to set custom attributes on traces about the current user environment. To help with that, @workleap/honeycomb expose the setGlobalSpanAttributes function.","Update your application bootstrapping code to include the setGlobalSpanAttribute function:","Now, every trace recorded after the execution of setGlobalSpanAttribute will include the custom attributes app.user_id:","Custom attributes"]},{"l":"Custrom traces","p":["Have a look at the custom traces page."]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["Start the application in a development environment using the dev script. Render a page, then navigate to your Honeycomb instance. Go to the \"Query\" page and type name = HTTP GET into the \"Where\" input. Run the query, select the \"Traces\" tab at the bottom of the page and view the detail of a trace. You should view information about the request."]},{"l":"Troubleshoot issues","p":["If you are experiencing issues with this guide:","Set the debug predefined option to true.","Open the DevTools console. You'll see a log entry for every Honeycomb traces.","honeycombio/opentelemetry-web: Honeycomb link: https://ui.honeycomb.io/...","Refer to the sample on GitHub."]}],[{"l":"Custom traces","p":["@workleap/honeycomb does not provide a proprietary API for traces. Applications are expected to use the OpenTelemetry API to send custom traces to Honeycomb:"]}],[{"l":"Reference"},{"l":"Artefacts","p":["Packages"]},{"l":"API","p":["registerHoneycombInstrumentation","setGlobalSpanAttributes"]}],[{"l":"Packages","p":["Name","Description","NPM","@workleap/honeycomb","Default Honeycomb instrumentation for Workleap web applications.","npm version"]}],[{"l":"registerHoneycombInstrumentation","p":["Initializes an instance of Honeycomb Web SDK with Workleap's default settings for web applications."]},{"l":"Reference"},{"l":"Parameters","p":["serviceName: Honeycomb application service name.","apiServiceUrls: A RegExp or string that matches the URLs of the application's backend services. If unsure, start with the temporary regex /.+/g, to match all URLs.","options: An optional object literal of predefined options."]},{"l":"Returns","p":["Nothing"]},{"l":"Default instrumentation","p":["The registerHoneycombInstrumentation function registers the following OpenTelemetry instrumentations by default:","@opentelemetry/instrumentation-fetch","@opentelemetry/instrumentation-document-load","For more details, refer to the registerHoneycombInstrumentation.ts file on GitHub."]},{"l":"Customize backend URLs","p":["Avoid using /.+/g, in production as it could expose customer data to third parties.","Specify values for the apiServiceUrls argument that matches your application's backend URLs. For example, if your backend services are hosted at https://workleap.com/api:"]},{"l":"Predefined options","p":["The registerHoneycombInstrumentation(serviceName, apiServiceUrls, options) function can be used as shown in the previous example, however, if you wish to customize the default configuration, the function also accept a few predefined options to help with that \uD83D\uDC47"]},{"l":"proxy","p":["Type: string","Default: undefined","Set the URL to an OpenTelemetry collector proxy. Either proxy or apiKey option must be provided.","When a proxy option is provided, the current session credentials are automatically sent with the OTel trace requests."]},{"l":"apiKey","p":["Prefer using an OpenTelemetry collector with an authenticated proxy over an ingestion API key, as API keys can expose Workleap to potential attacks.","Set an Honeycomb ingestion API key. Either proxy or apiKey option must be provided.","Type: string","Default: undefined"]},{"l":"instrumentations","p":["Type: An array of instrumentation objects","Default: []","Append the provided instrumentation instances to the configuration."]},{"l":"spanProcessors","p":["Type: An array of span processor objects","Default: []","Append the provided span processor instances to the configuration."]},{"l":"fetchInstrumentation","p":["Type: false or (defaultOptions: FetchInstrumentationConfig) = FetchInstrumentationConfig","Default: { ... }","Replace the default @opentelemetry/instrumentation-fetch options by providing a function that returns an object literal with the desired options. This function will receive an object literal containing the default options, which you can either extend or replace.","To disable @opentelemetry/instrumentation-fetch, set the option to false."]},{"l":"documentLoadInstrumentation","p":["Type: false or (defaultOptions: DocumentLoadInstrumentationConfig) = DocumentLoadInstrumentationConfig","Default: { ... }","Replace the default @opentelemetry/instrumentation-document-load options by providing a function that returns an object literal with the desired options. This function will receive an object literal containing the default options, which you can either extend or replace.","To disable @opentelemetry/instrumentation-document-load, set the option to false."]},{"l":"xmlHttpRequestInstrumentation","p":["Type: boolean or (defaultOptions: XMLHttpRequestInstrumentationConfig) = XMLHttpRequestInstrumentationConfig","Default: false","By default, @opentelemetry/instrumentation-xml-http-request is disabled. To enable this instrumentation, provide a function that returns an object literal with the desired options. This function will receive an object literal of default options, which you can extend or replace as needed.","Or set the option to true to enable @opentelemetry/instrumentation-xml-http-request with the default options."]},{"l":"userInteractionInstrumentation","p":["Type: boolean or (defaultOptions: UserInteractionInstrumentationConfig) = UserInteractionInstrumentationConfig","Default: false","By default, @opentelemetryinstrumentation-user-interaction is disabled. To enable this instrumentation, provide a function that returns an object literal with the desired options. This function will receive an object literal of default options, which you can extend or replace as needed.","Or set the option to true to enable @opentelemetryinstrumentation-user-interaction with the default options."]},{"l":"debug","p":["Type: boolean","Default: false","Indicates whether or not debug information should be logged to the console."]},{"l":"Configuration transformers","p":["We do not guarantee that your configuration transformers won't break after an update. It's your responsibility to keep them up to date with new releases.","The predefined options are useful to quickly customize the default configuration of the Honeycomb Web SDK, but only covers a subset of the options. If you need full control over the configuration, you can provide configuration transformer functions through the transformers option of the registerHoneycombInstrumentation function. Remember, no locked in❤️✌️.","To view the default configuration of registerHoneycombInstrumentation, have a look at the registerHoneycombInstrumentation.ts file on GitHub."]},{"l":"transformers","p":["Type: ((options: HoneycombSdkOptions, context: HoneycombSdkOptionsTransformerContext) = HoneycombSdkOptions)[]","Default: []"]},{"l":"Execution context","p":["Generic transformers can use the context argument to gather additional information about their execution context, like if they are operating in debug mode:","debug: boolean"]}],[{"l":"setGlobalSpanAttributes","p":["Set global attributes to be included in all Honeycomb web traces."]},{"l":"Reference"},{"l":"Parameters","p":["attributes: The attributes to include in every trace."]},{"l":"Returns","p":["Nothing"]},{"l":"Usage"}],[{"l":"Samples","p":["With an ingestion API key:","Frontend application","Server","With a proxy:","Proxy"]}],[{"l":"About","p":["To ask a question or propose an idea, feel free to start a new discussion on Github. If you found a bug, please open an issue on Github."]},{"l":"Contributing","p":["Have a look at the contributor's documentation."]},{"l":"License","p":["See the LICENSE on Github."]}]]